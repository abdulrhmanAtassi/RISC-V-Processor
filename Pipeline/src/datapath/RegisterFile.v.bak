module RegisterFile (
    input clk,
    input rst,               // Reset input
    input [4:0] ReadRegister1, 
    input [4:0] ReadRegister2, 
    input [4:0] WriteRegister,
    input [31:0] WriteData,
    input WriteEnable,      // Control signal for enabling write
    output reg signed [31:0] ReadData1, 
    output reg signed [31:0] ReadData2
);

    // Define a 32x32 register array (32 registers, each 32 bits wide)
    reg signed [31:0] registers [0:31];
    integer i;
    // Reset logic and synchronous write
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            // Reset all registers to 0 when reset is asserted
            
            for (i = 0; i < 32; i = i + 1) begin
                registers[i] <= 32'b0;
            end
        end else begin
            // Synchronous write
            if (WriteEnable && WriteRegister != 5'b00000) begin
                registers[WriteRegister] <= WriteData; // Write to the register
            end
        end
    end

    // Asynchronous read
    always @(*) begin
        ReadData1 = registers[ReadRegister1];
        ReadData2 = registers[ReadRegister2];
    end

endmodule